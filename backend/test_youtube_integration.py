#!/usr/bin/env python3
"""
Integration test for YouTube video processing with real API calls
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from backend.main import extract_video_id, post_process_subtitles
from youtube_transcript_api import YouTubeTranscriptApi
import json
import traceback

def test_real_youtube_video():
    """Test with a real YouTube video to ensure everything works end-to-end"""
    print("üé• TESTING REAL YOUTUBE VIDEO PROCESSING")
    print("=" * 60)

    # Use a short educational video (replace with any public video)
    test_urls = [
        "https://www.youtube.com/watch?v=dQw4w9WgXcQ",  # Rick Roll (fallback)
        "https://www.youtube.com/watch?v=ScMzIvxBSi4",  # Short educational video
    ]

    for video_url in test_urls:
        try:
            video_id = extract_video_id(video_url)
            print(f"\nüì∫ Testing video: {video_url}")\n            print(f\"üìã Video ID: {video_id}\")\n\n            if not video_id:\n                print(\"‚ùå Invalid video URL, skipping...\")\n                continue\n\n            # Get raw transcript from YouTube\n            print(\"\\nüîç Fetching transcript from YouTube API...\")\n            api = YouTubeTranscriptApi()\n            raw_transcript = api.fetch(video_id)\n\n            # Convert to expected format\n            raw_segments = []\n            for entry in raw_transcript:\n                raw_segments.append({\n                    'text': entry.text,\n                    'start': entry.start,\n                    'duration': getattr(entry, 'duration', 0)\n                })\n\n            print(f\"‚úÖ Retrieved {len(raw_segments)} raw transcript segments\")\n\n            # Show some raw segments\n            print(\"\\nüìã First 5 raw segments:\")\n            for i, seg in enumerate(raw_segments[:5]):\n                print(f\"  {i+1}. [{seg['start']:.1f}-{seg['start']+seg['duration']:.1f}s] '{seg['text'][:50]}...'\")\n\n            # Test our post-processing\n            print(\"\\nüîß Applying post-processing...\")\n            processed_segments = post_process_subtitles(raw_segments)\n\n            print(f\"\\nüìä RESULTS:\")\n            print(f\"  Raw segments: {len(raw_segments)}\")\n            print(f\"  Processed segments: {len(processed_segments)}\")\n            print(f\"  Compression ratio: {len(raw_segments)/len(processed_segments):.1f}x\")\n\n            # Show processed segments\n            print(\"\\nüìã First 5 processed segments:\")\n            for i, seg in enumerate(processed_segments[:5]):\n                print(f\"  {i+1}. [{seg['start']:.1f}-{seg['end']:.1f}s] ({seg['duration']:.1f}s)\")\n                print(f\"      '{seg['text'][:80]}...'\")\n                print(f\"      Complete: {seg.get('sentence_complete', 'unknown')}, Reason: {seg.get('break_reason', 'unknown')}\")\n                print(f\"      Original segments: {seg.get('original_segments', 1)}\")\n\n            # Analyze segment durations\n            durations = [seg['duration'] for seg in processed_segments]\n            avg_duration = sum(durations) / len(durations)\n            max_duration = max(durations)\n            min_duration = min(durations)\n\n            print(f\"\\nüìà DURATION ANALYSIS:\")\n            print(f\"  Average: {avg_duration:.1f}s\")\n            print(f\"  Range: {min_duration:.1f}s - {max_duration:.1f}s\")\n            print(f\"  Segments > 15s: {len([d for d in durations if d > 15])}\")\n            print(f\"  Segments < 2s: {len([d for d in durations if d < 2])}\")\n\n            # Save results for analysis\n            results = {\n                \"video_id\": video_id,\n                \"video_url\": video_url,\n                \"raw_segments_count\": len(raw_segments),\n                \"processed_segments_count\": len(processed_segments),\n                \"compression_ratio\": len(raw_segments)/len(processed_segments),\n                \"duration_stats\": {\n                    \"average\": avg_duration,\n                    \"min\": min_duration,\n                    \"max\": max_duration,\n                    \"long_segments\": len([d for d in durations if d > 15]),\n                    \"short_segments\": len([d for d in durations if d < 2])\n                },\n                \"sample_segments\": processed_segments[:10]  # First 10 for analysis\n            }\n\n            with open(f\"test_results_{video_id}.json\", 'w', encoding='utf-8') as f:\n                json.dump(results, f, indent=2, ensure_ascii=False)\n\n            print(f\"\\nüíæ Results saved to: test_results_{video_id}.json\")\n\n            # SUCCESS!\n            if max_duration <= 20 and len([d for d in durations if d > 15]) <= len(processed_segments) * 0.1:\n                print(\"\\n‚úÖ SUCCESS: Post-processing working correctly!\")\n                print(\"   - No segments too long (>20s)\")\n                print(\"   - Less than 10% of segments are long (>15s)\")\n                return True\n            else:\n                print(\"\\n‚ö†Ô∏è  WARNING: Some segments might still be too long\")\n                return False\n\n        except Exception as e:\n            print(f\"\\n‚ùå ERROR testing {video_url}:\")\n            print(f\"   {str(e)}\")\n            print(\"\\nFull traceback:\")\n            traceback.print_exc()\n            continue\n\n    print(\"\\n‚ùå All test videos failed\")\n    return False\n\ndef test_mock_scenarios():\n    \"\"\"Test various mock scenarios to ensure robustness\"\"\"\n    print(\"\\n\\nüß™ TESTING MOCK SCENARIOS\")\n    print(\"=\" * 60)\n\n    scenarios = [\n        {\n            \"name\": \"Very short segments\",\n            \"segments\": [\n                {\"text\": \"Hi\", \"start\": 0, \"duration\": 1},\n                {\"text\": \"there\", \"start\": 1, \"duration\": 1},\n                {\"text\": \"everyone!\", \"start\": 2, \"duration\": 1}\n            ]\n        },\n        {\n            \"name\": \"Mixed with very long segment\",\n            \"segments\": [\n                {\"text\": \"Welcome to this tutorial where we will learn about many different topics including programming languages like Python and JavaScript and also web development frameworks like React and Vue and backend technologies like Node.js and Django and database systems like MySQL and PostgreSQL and many other exciting technologies that will help you become a better developer\", \"start\": 0, \"duration\": 45},\n                {\"text\": \"Let's begin!\", \"start\": 45, \"duration\": 2}\n            ]\n        },\n        {\n            \"name\": \"Only punctuation endings\",\n            \"segments\": [\n                {\"text\": \"First point.\", \"start\": 0, \"duration\": 3},\n                {\"text\": \"Second point!\", \"start\": 4, \"duration\": 3},\n                {\"text\": \"Third point?\", \"start\": 8, \"duration\": 3}\n            ]\n        }\n    ]\n\n    for scenario in scenarios:\n        print(f\"\\nüî¨ Testing: {scenario['name']}\")\n        segments = scenario['segments']\n        \n        try:\n            processed = post_process_subtitles(segments)\n            \n            print(f\"   Raw: {len(segments)} segments\")\n            print(f\"   Processed: {len(processed)} segments\")\n            \n            for i, seg in enumerate(processed):\n                print(f\"   {i+1}. ({seg['duration']:.1f}s) '{seg['text'][:60]}...'\")\n                \n            # Check for issues\n            long_segments = [s for s in processed if s['duration'] > 20]\n            if long_segments:\n                print(f\"   ‚ö†Ô∏è  {len(long_segments)} segments still too long!\")\n            else:\n                print(f\"   ‚úÖ All segments within acceptable duration\")\n                \n        except Exception as e:\n            print(f\"   ‚ùå ERROR: {str(e)}\")\n\ndef run_all_tests():\n    \"\"\"Run all integration tests\"\"\"\n    print(\"üöÄ STARTING COMPREHENSIVE SUBTITLE PROCESSING TESTS\")\n    print(\"=\" * 80)\n    \n    # Test mock scenarios first\n    test_mock_scenarios()\n    \n    # Test real YouTube video\n    success = test_real_youtube_video()\n    \n    print(\"\\n\" + \"=\" * 80)\n    if success:\n        print(\"üéâ ALL TESTS PASSED! Subtitle processing is working correctly.\")\n    else:\n        print(\"‚ö†Ô∏è  Some tests had issues. Review the output above.\")\n    print(\"=\" * 80)\n\nif __name__ == \"__main__\":\n    run_all_tests()"